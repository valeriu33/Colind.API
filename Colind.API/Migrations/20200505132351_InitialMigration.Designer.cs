// <auto-generated />
using Colind.API.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Colind.API.Migrations
{
    [DbContext(typeof(ColindContext))]
    [Migration("20200505132351_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Colind.API.Persistence.Entities.AuthorEntity", b =>
                {
                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("FullName");

                    b.HasIndex("FullName");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("Colind.API.Persistence.Entities.ColindEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuthorFullName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AuthorFullName");

                    b.ToTable("Colinds");
                });

            modelBuilder.Entity("Colind.API.Persistence.Entities.ColindTagEntity", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<int>("ColindId")
                        .HasColumnType("int");

                    b.HasKey("TagId", "ColindId");

                    b.HasIndex("ColindId");

                    b.ToTable("ColindTag");
                });

            modelBuilder.Entity("Colind.API.Persistence.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Colind.API.Persistence.Entities.ColindEntity", b =>
                {
                    b.HasOne("Colind.API.Persistence.Entities.AuthorEntity", "Author")
                        .WithMany("Colinds")
                        .HasForeignKey("AuthorFullName");
                });

            modelBuilder.Entity("Colind.API.Persistence.Entities.ColindTagEntity", b =>
                {
                    b.HasOne("Colind.API.Persistence.Entities.ColindEntity", "Colind")
                        .WithMany("ColindTags")
                        .HasForeignKey("ColindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colind.API.Persistence.Entities.TagEntity", "Tag")
                        .WithMany("ColindTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
